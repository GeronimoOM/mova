# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Language {
  id: ID!
  name: String!
  addedAt: Timestamp!
  properties(partOfSpeech: PartOfSpeech): [Property!]!
  words(cursor: String, limit: Int = 20, query: String, partsOfSpeech: [PartOfSpeech!], order: WordOrder, direction: Direction): WordPage!
  word(original: String!): Word
  stats: WordsStats!
  goals: [Goal!]!
  progress(type: ProgressType!): Progress!
  exerciseWords(total: Int): [Word!]!
  exerciseCount: Int!
}

"""
The `Timestamp` scalar type represents a timepoint as a string in the format `YYYY-MM-DD hh:mm:ss` .
"""
scalar Timestamp

union Property = TextProperty | OptionProperty

enum PartOfSpeech {
  Noun
  Verb
  Adj
  Adv
  Pron
  Misc
}

enum WordOrder {
  Alphabetical
  Chronological
  Random
}

enum Direction {
  Asc
  Desc
}

enum ProgressType {
  Mastery
  Words
}

type TextProperty implements IProperty {
  id: ID!
  name: String!
  type: PropertyType!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp!
  order: Int!
  languageId: ID!
  usage: Int!
}

interface IProperty {
  id: ID!
  name: String!
  type: PropertyType!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp!
  order: Int!
  languageId: ID!
  usage: Int!
}

enum PropertyType {
  Text
  Option
}

type OptionProperty implements IProperty {
  id: ID!
  name: String!
  type: PropertyType!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp!
  order: Int!
  languageId: ID!
  usage: Int!
  options: [Option!]!
  optionsUsage: [OptionUsage!]!
}

type Option {
  id: ID!
  value: String!
  color: Color
}

enum Color {
  Red
  Orange
  Yellow
  Green
  Teal
  Blue
  Purple
  Pink
  Brown
}

type OptionUsage {
  id: ID!
  count: Int!
}

type OptionValue {
  id: ID
  value: String!
  color: Color
}

type Word {
  id: ID!
  original: String!
  translation: String!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp!
  mastery: Int!
  nextExerciseAt: Timestamp!
  languageId: ID!
  properties: [PropertyValue!]!
}

union PropertyValue = TextPropertyValue | OptionPropertyValue

type TextPropertyValue {
  property: TextProperty!
  text: String!
}

type OptionPropertyValue {
  property: OptionProperty!
  option: OptionValue
}

type WordPage {
  items: [Word!]!
  nextCursor: String
}

type LanguageUpdate {
  id: ID!
  name: String!
}

type OptionUpdate {
  id: ID!
  value: String
  color: Color
}

type PropertiesReorder {
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  propertyIds: [ID!]!
}

type WordCreate {
  id: ID!
  original: String!
  translation: String!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp!
  mastery: Int!
  nextExerciseAt: Timestamp!
  languageId: ID!
  properties: [PropertyValueSave!]!
}

union PropertyValueSave = TextPropertyValueSave | OptionPropertyValueSave

type TextPropertyValueSave implements IPropertyValueSave {
  propertyId: ID!
  type: PropertyType!
  text: String
}

interface IPropertyValueSave {
  propertyId: ID!
  type: PropertyType!
}

type OptionPropertyValueSave implements IPropertyValueSave {
  propertyId: ID!
  type: PropertyType!
  optionId: ID
  value: String
  color: Color
}

type WordUpdate {
  id: ID!
  original: String
  translation: String
  properties: [PropertyValueSave!]
  mastery: Int
  nextExerciseAt: Timestamp
}

type ChangePage {
  items: [Change!]!
  nextCursor: String
  syncType: SyncType!
}

union Change = CreateLanguageChange | UpdateLanguageChange | DeleteLanguageChange | CreatePropertyChange | UpdatePropertyChange | ReorderPropertiesChange | DeletePropertyChange | CreateWordChange | UpdateWordChange | DeleteWordChange

type CreateLanguageChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  created: Language!
}

interface IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
}

enum ChangeType {
  CreateLanguage
  UpdateLanguage
  DeleteLanguage
  CreateProperty
  UpdateProperty
  ReorderProperties
  DeleteProperty
  CreateWord
  UpdateWord
  DeleteWord
}

type UpdateLanguageChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  updated: LanguageUpdate!
}

type DeleteLanguageChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  deleted: ID!
}

type CreatePropertyChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  created: Property!
}

type UpdatePropertyChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  updated: PropertyUpdate!
}

union PropertyUpdate = TextPropertyUpdate | OptionPropertyUpdate

type TextPropertyUpdate implements IPropertyUpdate {
  id: ID!
  type: PropertyType!
  name: String
}

interface IPropertyUpdate {
  id: ID!
  type: PropertyType!
  name: String
}

type OptionPropertyUpdate implements IPropertyUpdate {
  id: ID!
  type: PropertyType!
  name: String
  options: [OptionUpdate!]
}

type ReorderPropertiesChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  reordered: PropertiesReorder!
}

type DeletePropertyChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  deleted: ID!
}

type CreateWordChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  created: WordCreate!
}

type UpdateWordChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  updated: WordUpdate!
}

type DeleteWordChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  deleted: ID!
}

enum SyncType {
  Full
  Delta
}

type Goal {
  type: ProgressType!
  cadence: ProgressCadence!
  points: Int!
}

enum ProgressCadence {
  Daily
  Weekly
}

type ProgressInstance {
  date: Timestamp!
  points: Int!
}

type Progress {
  type: ProgressType!
  cadence: ProgressCadence!
  goal: Goal!
  current(cadence: ProgressCadence): ProgressInstance!
  streak: Int!
  history(cadence: ProgressCadence!): ProgressHistory!
}

type ProgressHistory {
  cadence: ProgressCadence!
  from: Timestamp!
  until: Timestamp!
  instances: [ProgressInstance!]!
}

type UserSettings {
  selectedLanguageId: ID
  selectedLocale: String
  selectedFont: String
  includeMastered: Boolean
}

type WordsStatsMastery {
  total: Int!
  mastery: Int!
}

type WordsStatsPartOfSpeech {
  total: Int!
  partOfSpeech: PartOfSpeech!
}

type WordsStats {
  total: Int!
  mastery: [WordsStatsMastery!]!
  partsOfSpeech: [WordsStatsPartOfSpeech!]!
}

type Query {
  languages: [Language!]!
  language(id: ID!): Language
  property(id: ID!): Property
  changes(cursor: String, limit: Int = 20, syncType: SyncType, changedAt: Timestamp): ChangePage!
  word(id: ID!): Word
  settings: UserSettings!
}

type Mutation {
  login(input: LoginInput!): String
  createLanguage(input: CreateLanguageInput!): Language!
  updateLanguage(input: UpdateLanguageInput!): Language!
  deleteLanguage(input: DeleteLanguageInput!): Language!
  createProperty(input: CreatePropertyInput!): Property!
  updateProperty(input: UpdatePropertyInput!): Property!
  reorderProperties(input: ReorderPropertiesInput!): [Property!]!
  deleteProperty(input: DeletePropertyInput!): Property!
  applyChanges(changes: [ApplyChangeInput!]!): Boolean!
  createWord(input: CreateWordInput!): Word!
  updateWord(input: UpdateWordInput!): Word!
  deleteWord(input: DeleteWordInput!): Word!
  attemptMastery(wordId: ID!, success: Boolean!): Word!
  setGoals(input: SetGoalsInput!): [Goal!]!
  updateSettings(input: UpdateUserSettingsInput!): UserSettings!
}

input LoginInput {
  name: String!
  password: String!
}

input CreateLanguageInput {
  id: ID
  name: String!
  addedAt: Timestamp
}

input UpdateLanguageInput {
  id: ID!
  name: String!
}

input DeleteLanguageInput {
  id: ID!
}

input CreatePropertyInput {
  id: ID
  name: String!
  type: PropertyType!
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp
  options: [CreateOptionInput!]
}

input CreateOptionInput {
  id: ID
  value: String!
  color: Color
}

input UpdatePropertyInput {
  id: ID!
  name: String
  options: [UpdateOptionInput!]
}

input UpdateOptionInput {
  id: ID
  value: String
  color: Color
}

input ReorderPropertiesInput {
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  propertyIds: [ID!]!
}

input DeletePropertyInput {
  id: ID!
}

input ApplyChangeInput {
  createLanguage: CreateLanguageInput
  updateLanguage: UpdateLanguageInput
  deleteLanguage: DeleteLanguageInput
  createProperty: CreatePropertyInput
  updateProperty: UpdatePropertyInput
  reorderProperties: ReorderPropertiesInput
  deleteProperty: DeletePropertyInput
  createWord: CreateWordInput
  updateWord: UpdateWordInput
  deleteWord: DeleteWordInput
}

input CreateWordInput {
  id: ID
  original: String!
  translation: String!
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp
  properties: [SavePropertyValueInput!]
}

input SavePropertyValueInput {
  id: ID!
  text: String
  option: UpdatePropertyValueOptionInput
}

input UpdatePropertyValueOptionInput {
  id: ID
  value: String
  color: Color
}

input UpdateWordInput {
  id: ID!
  original: String
  translation: String
  properties: [SavePropertyValueInput!]
}

input DeleteWordInput {
  id: ID!
}

input SetGoalsInput {
  languageId: ID!
  goals: [SetGoalInput!]!
}

input SetGoalInput {
  type: ProgressType!
  cadence: ProgressCadence!
  points: Int!
}

input UpdateUserSettingsInput {
  selectedLanguageId: ID
  selectedLocale: String
  selectedFont: String
  includeMastered: Boolean
}