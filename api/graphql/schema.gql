# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Language {
  id: ID!
  name: String!
  addedAt: Timestamp!
  properties(partOfSpeech: PartOfSpeech): [Property!]!
  topics(cursor: String, limit: Int, query: String): TopicPage!
  words(cursor: String, limit: Int, query: String, partsOfSpeech: [PartOfSpeech!], topics: [ID!], order: WordOrder, direction: Direction): WordPage!
  wordsStats(days: Int, from: String): WordsStats!
}

"""
The `Timestamp` scalar type represents a timepoint as a string in the format YYYY-MM-DD hh:mm:ss.
"""
scalar Timestamp

union Property = TextProperty | OptionProperty

enum PartOfSpeech {
  Noun
  Verb
  Adj
  Adv
  Pron
  Misc
}

enum WordOrder {
  Alphabetical
  Chronological
  Random
}

enum Direction {
  Asc
  Desc
}

type TextProperty implements IProperty {
  id: ID!
  name: String!
  type: PropertyType!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp!
  order: Int!
  languageId: ID!
}

interface IProperty {
  id: ID!
  name: String!
  type: PropertyType!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp!
  order: Int!
  languageId: ID!
}

enum PropertyType {
  Text
  Option
}

type OptionProperty implements IProperty {
  id: ID!
  name: String!
  type: PropertyType!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp!
  order: Int!
  languageId: ID!
  options: [Option!]!
}

type Option {
  id: ID!
  value: String!
}

type Word {
  id: ID!
  original: String!
  translation: String!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp!
  languageId: ID!
  properties: [PropertyValue!]!
}

union PropertyValue = TextPropertyValue | OptionPropertyValue

type TextPropertyValue {
  property: TextProperty!
  text: String!
}

type OptionPropertyValue {
  property: OptionProperty!
  option: Option!
}

type WordPage {
  items: [Word!]!
  nextCursor: String
}

type Topic {
  id: ID!
  name: String!
  words(cursor: String, limit: Int, query: String, partOfSpeech: [PartOfSpeech!], order: WordOrder, direction: Direction): WordPage!
}

type TopicPage {
  items: [Topic!]!
  nextCursor: String
}

type WordsTotalStats {
  words: Int!
}

type WordsDateStats {
  date: String!
  words: Int!
}

type WordsByDateStats {
  from: String!
  until: String!
  dates: [WordsDateStats!]!
}

type WordsStats {
  total: WordsTotalStats!
  byDate: WordsByDateStats!
}

type LanguageUpdate {
  id: ID!
  name: String!
}

type PropertiesReorder {
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  propertyIds: [ID!]!
}

type WordCreate {
  id: ID!
  original: String!
  translation: String!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp!
  languageId: ID!
  properties: [PropertyValueSave!]!
}

union PropertyValueSave = TextPropertyValueSave | OptionPropertyValueSave

type TextPropertyValueSave implements IPropertyValueSave {
  propertyId: ID!
  type: PropertyType!
  text: String
}

interface IPropertyValueSave {
  propertyId: ID!
  type: PropertyType!
}

type OptionPropertyValueSave implements IPropertyValueSave {
  propertyId: ID!
  type: PropertyType!
  optionId: ID
}

type WordUpdate {
  id: ID!
  original: String
  translation: String
  properties: [PropertyValueSave!]
}

type ChangePage {
  items: [Change!]!
  nextCursor: String
  syncType: SyncType!
}

union Change = CreateLanguageChange | UpdateLanguageChange | DeleteLanguageChange | CreatePropertyChange | UpdatePropertyChange | ReorderPropertiesChange | DeletePropertyChange | CreateWordChange | UpdateWordChange | DeleteWordChange

type CreateLanguageChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  created: Language!
}

interface IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
}

enum ChangeType {
  CreateLanguage
  UpdateLanguage
  DeleteLanguage
  CreateProperty
  UpdateProperty
  ReorderProperties
  DeleteProperty
  CreateWord
  UpdateWord
  DeleteWord
}

type UpdateLanguageChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  updated: LanguageUpdate!
}

type DeleteLanguageChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  deleted: ID!
}

type CreatePropertyChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  created: Property!
}

type UpdatePropertyChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  updated: PropertyUpdate!
}

union PropertyUpdate = TextPropertyUpdate | OptionPropertyUpdate

type TextPropertyUpdate implements IPropertyUpdate {
  id: ID!
  type: PropertyType!
  name: String
}

interface IPropertyUpdate {
  id: ID!
  type: PropertyType!
  name: String
}

type OptionPropertyUpdate implements IPropertyUpdate {
  id: ID!
  type: PropertyType!
  name: String
  options: [Option!]
}

type ReorderPropertiesChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  reordered: PropertiesReorder!
}

type DeletePropertyChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  deleted: ID!
}

type CreateWordChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  created: WordCreate!
}

type UpdateWordChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  updated: WordUpdate!
}

type DeleteWordChange implements IChange {
  id: ID!
  changedAt: Timestamp!
  type: ChangeType!
  deleted: ID!
}

enum SyncType {
  Full
  Delta
}

type Query {
  languages: [Language!]!
  language(id: ID!): Language
  property(id: ID!): Property
  changes(cursor: String, limit: Int, syncType: SyncType, changedAt: Timestamp): ChangePage!
  word(id: ID!): Word
}

type Mutation {
  createLanguage(input: CreateLanguageInput!): Language!
  updateLanguage(input: UpdateLanguageInput!): Language!
  deleteLanguage(input: DeleteLanguageInput!): Language!
  createProperty(input: CreatePropertyInput!): Property!
  updateProperty(input: UpdatePropertyInput!): Property!
  reorderProperties(input: ReorderPropertiesInput!): [Property!]!
  deleteProperty(input: DeletePropertyInput!): Property!
  applyChanges(changes: [ApplyChangeInput!]!): Boolean!
  createWord(input: CreateWordInput!): Word!
  updateWord(input: UpdateWordInput!): Word!
  deleteWord(input: DeleteWordInput!): Word!
  createTopic(input: CreateTopicInput!): Topic!
  deleteTopic(id: ID!): Topic!
  addTopicWord(topicId: ID!, wordId: ID!): Topic!
  removeTopicWord(topicId: ID!, wordId: ID!): Topic!
}

input CreateLanguageInput {
  id: ID
  name: String!
  addedAt: Timestamp
}

input UpdateLanguageInput {
  id: ID!
  name: String!
}

input DeleteLanguageInput {
  id: ID!
}

input CreatePropertyInput {
  id: ID
  name: String!
  type: PropertyType!
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp
  options: [String!]
}

input UpdatePropertyInput {
  id: ID!
  name: String
  options: [UpdateOptionInput!]
}

input UpdateOptionInput {
  id: ID!
  value: String!
}

input ReorderPropertiesInput {
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  propertyIds: [ID!]!
}

input DeletePropertyInput {
  id: ID!
}

input ApplyChangeInput {
  createLanguage: CreateLanguageInput
  updateLanguage: UpdateLanguageInput
  deleteLanguage: DeleteLanguageInput
  createProperty: CreatePropertyInput
  updateProperty: UpdatePropertyInput
  reorderProperties: ReorderPropertiesInput
  deleteProperty: DeletePropertyInput
  createWord: CreateWordInput
  updateWord: UpdateWordInput
  deleteWord: DeleteWordInput
}

input CreateWordInput {
  id: ID
  original: String!
  translation: String!
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  addedAt: Timestamp
  properties: [UpdatePropertyValueInput!]
}

input UpdatePropertyValueInput {
  id: ID!
  text: String
  option: ID
}

input UpdateWordInput {
  id: ID!
  original: String
  translation: String
  properties: [UpdatePropertyValueInput!]
}

input DeleteWordInput {
  id: ID!
}

input CreateTopicInput {
  name: String!
  languageId: ID!
}