# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Language {
  id: ID!
  name: String!
  properties(partOfSpeech: PartOfSpeech): [PropertyUnion!]!
  topics(cursor: String, limit: Int, query: String): TopicPage!
  words(cursor: String, limit: Int, query: String, partsOfSpeech: [PartOfSpeech!], topics: [ID!], from: String, until: String, order: WordOrder): WordPage!
  wordsStats(days: Int, from: String): WordsStats!
}

union PropertyUnion = TextProperty | OptionProperty

enum PartOfSpeech {
  Noun
  Verb
  Adj
  Adv
  Pron
  Misc
}

enum WordOrder {
  Alphabetical
  Chronological
  Random
}

type TextProperty {
  id: ID!
  name: String!
  type: PropertyType!
  partOfSpeech: PartOfSpeech!
  languageId: ID!
}

enum PropertyType {
  Text
  Option
}

type OptionProperty {
  id: ID!
  name: String!
  type: PropertyType!
  partOfSpeech: PartOfSpeech!
  languageId: ID!
  options: [Option!]!
}

type Option {
  id: ID!
  value: String!
}

type Word {
  id: String!
  original: String!
  translation: String!
  partOfSpeech: PartOfSpeech!
  addedAt: Int!
  properties: [PropertyValueUnion!]!
  languageId: ID!
}

union PropertyValueUnion = TextPropertyValue | OptionPropertyValue

type TextPropertyValue {
  property: TextProperty!
  text: String!
}

type OptionPropertyValue {
  property: OptionProperty!
  option: Option!
}

type WordPage {
  items: [Word!]!
  nextCursor: String
}

type Topic {
  id: ID!
  name: String!
  words(cursor: String, limit: Int, query: String, partOfSpeech: [PartOfSpeech!], order: WordOrder): WordPage!
}

type TopicPage {
  items: [Topic!]!
  nextCursor: String
}

type WordsTotalStats {
  words: Int!
}

type WordsDateStats {
  date: String!
  words: Int!
}

type WordsByDateStats {
  from: String!
  until: String!
  dates: [WordsDateStats!]!
}

type WordsStats {
  total: WordsTotalStats!
  byDate: WordsByDateStats!
}

type Query {
  languages: [Language!]!
  language(id: ID!): Language
  property(id: ID!): PropertyUnion
  word(id: ID!): Word
}

type Mutation {
  createLanguage(input: CreateLanguageInput!): Language!
  updateLanguage(input: UpdateLanguageInput!): Language!
  deleteLanguage(id: ID!): Language!
  createProperty(input: CreatePropertyInput!): PropertyUnion!
  updateProperty(input: UpdatePropertyInput!): PropertyUnion!
  reorderProperties(input: ReorderPropertiesInput!): [PropertyUnion!]!
  deleteProperty(id: ID!): PropertyUnion!
  createWord(input: CreateWordInput!): Word!
  updateWord(input: UpdateWordInput!): Word!
  deleteWord(id: ID!): Word!
  createTopic(input: CreateTopicInput!): Topic!
  deleteTopic(id: ID!): Topic!
  addTopicWord(topicId: ID!, wordId: ID!): Topic!
  removeTopicWord(topicId: ID!, wordId: ID!): Topic!
}

input CreateLanguageInput {
  name: String!
}

input UpdateLanguageInput {
  id: ID!
  name: String!
}

input CreatePropertyInput {
  name: String!
  type: PropertyType!
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  options: [String!]
}

input UpdatePropertyInput {
  id: ID!
  name: String
  options: [UpdateOptionInput!]
}

input UpdateOptionInput {
  id: ID!
  value: String!
}

input ReorderPropertiesInput {
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  propertyIds: [ID!]!
}

input CreateWordInput {
  original: String!
  translation: String!
  languageId: ID!
  partOfSpeech: PartOfSpeech!
  properties: [UpdatePropertyValueInput!]
}

input UpdatePropertyValueInput {
  id: ID!
  text: String
  option: ID
}

input UpdateWordInput {
  id: ID!
  original: String
  translation: String
  properties: [UpdatePropertyValueInput!]
}

input CreateTopicInput {
  name: String!
  languageId: ID!
}